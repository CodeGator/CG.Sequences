{
  "api/CG.Sequences.html": {
    "href": "api/CG.Sequences.html",
    "title": "Namespace CG.Sequences",
    "keywords": "Namespace CG.Sequences Classes MaskedFormatter This class is an implementation of IMaskedFormatter that formats a given value using a mask comprised of literal and token symbols. Each token in the mask is used to format the number, according to the rules for that token. Literal symbols are copied verbatum to the output. Token symbols can also be escaped by leading the symbol with a '&apos;. SequenceException This class represents a sequence related exception. Interfaces IMaskedFormatter This interface represents a custom formatter object that uses a mask to specify how to convert a value to a string."
  },
  "api/CG.Sequences.IMaskedFormatter.html": {
    "href": "api/CG.Sequences.IMaskedFormatter.html",
    "title": "Interface IMaskedFormatter",
    "keywords": "Interface IMaskedFormatter This interface represents a custom formatter object that uses a mask to specify how to convert a value to a string. Inherited Members System.IFormatProvider.GetFormat(System.Type) System.ICustomFormatter.Format(System.String, System.Object, System.IFormatProvider) Namespace : CG.Sequences Assembly : CG.Sequences.dll Syntax public interface IMaskedFormatter : IFormatProvider, ICustomFormatter"
  },
  "api/CG.Sequences.MaskedFormatter.html": {
    "href": "api/CG.Sequences.MaskedFormatter.html",
    "title": "Class MaskedFormatter",
    "keywords": "Class MaskedFormatter This class is an implementation of IMaskedFormatter that formats a given value using a mask comprised of literal and token symbols. Each token in the mask is used to format the number, according to the rules for that token. Literal symbols are copied verbatum to the output. Token symbols can also be escaped by leading the symbol with a '&apos;. Inheritance System.Object MaskedFormatter Implements IMaskedFormatter System.IFormatProvider System.ICustomFormatter Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Sequences Assembly : CG.Sequences.dll Syntax public sealed class MaskedFormatter : IMaskedFormatter, IFormatProvider, ICustomFormatter Remarks The mask may contain any combination of tokens and literals, to any length desired. If the value cannot be expressed with a given mask then a System.FormatException exception is thrown. So, make sure the mask you use have enough tokens in it to handle the range of values you'll be trying to format. The mask part of the format string MUST start and end with the '$' symbol and may contain the following conversion tokens: Token-Description 'D'This token denotes a decimal placeholder, which means this digit will be formatted as a decimal number (0 through 9). 'B'This token denotes a binary placeholder, which means this digit will be formatted as a binary number (0 through 1). 'O'This token denotes an octal placeholder, which means this digit will be formatted as a octal number (0 through 7). 'H'This token denotes a hex placeholder, which means this digit will be formatted as a hex number (0 through F). 'Z'This token denotes a base36 placeholder, which means this digit will be formatted as a printable character (0 through 9, a through Z). Literal symbols may be any legal .NET character but token symbols used as a literal MUST be escaped with a leading '\\' character. Examples This example shows how to use the MaskedFormatter class to format a numeric value into a custom string. class TestClass { static void Main() { var result = String.Format(new MaskedFormatter(), \"{0:$HHHH$}\", 101); Console.WriteLine(result); // Outputs the value: 0065 // (hex conversion with no literals) result = String.Format(new MaskedFormatter(), \"{0:$OOOO$}\", 101); Console.WriteLine(result); // Outputs the value: 0145 // (octal conversion with no literals) result = String.Format(new MaskedFormatter(), \"{0:$HBOD$}\", 201); Console.WriteLine(result); // Outputs the value: 1041 // (mixed base conversion with no literals) result = String.Format(new MaskedFormatter(), \"{0:$H_B-O%D=$}\", 201); Console.WriteLine(result); // Outputs the value: 1_0-4%1= // (mixed base conversion with embedded literals) } } Methods Format(String, Object, IFormatProvider) This method converts the value of a specified object to an equivalent string representation using specified format and culture-specific formatting information. Declaration public string Format(string format, object arg, IFormatProvider formatProvider) Parameters Type Name Description System.String format A format string containing formatting specifications. System.Object arg An object to format. System.IFormatProvider formatProvider An object that supplies format information about the current instance. Returns Type Description System.String The string representation of the value of arg, formatted as specified by format and formatProvider. GetFormat(Type) This method returns an object that provides formatting services for the specified type. Declaration public object GetFormat(Type formatType) Parameters Type Name Description System.Type formatType An object that specifies the type of format object to return. Returns Type Description System.Object An instance of the object specified by formatType, if the System.IFormatProvider implementation can supply that type of object; otherwise, null. Implements IMaskedFormatter System.IFormatProvider System.ICustomFormatter"
  },
  "api/CG.Sequences.Models.html": {
    "href": "api/CG.Sequences.Models.html",
    "title": "Namespace CG.Sequences.Models",
    "keywords": "Namespace CG.Sequences.Models Classes Sequence This class represents a numeric sequence."
  },
  "api/CG.Sequences.Models.Sequence.html": {
    "href": "api/CG.Sequences.Models.Sequence.html",
    "title": "Class Sequence",
    "keywords": "Class Sequence This class represents a numeric sequence. Inheritance System.Object CG.DataAnnotations.ValidatableObject CG.Business.Models.ModelBase CG.Business.Models.ModelBase < System.Int32 > Sequence Implements System.ComponentModel.DataAnnotations.IValidatableObject CG.Business.Models.IModel < System.Int32 > CG.Business.Models.IModel Inherited Members CG.Business.Models.ModelBase<System.Int32>.GetHashCode() CG.Business.Models.ModelBase<System.Int32>.Equals(System.Object) CG.Business.Models.ModelBase<System.Int32>.ToString() CG.Business.Models.ModelBase<System.Int32>.Key CG.DataAnnotations.ValidatableObject.Validate(System.ComponentModel.DataAnnotations.ValidationContext) System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : CG.Sequences.Models Assembly : CG.Sequences.dll Syntax public class Sequence : ModelBase<int>, IValidatableObject, IModel<int>, IModel Properties CreatedBy This property contains the name of the person who created the sequence. Declaration public string CreatedBy { get; set; } Property Value Type Description System.String CreatedDate This property contains the date when the sequence was created. Declaration public DateTime CreatedDate { get; set; } Property Value Type Description System.DateTime LastValue This property contains the last known value of the sequence. Declaration public BigInteger LastValue { get; set; } Property Value Type Description System.Numerics.BigInteger Mask This property contains a mask, for formatting the count values from the sequence. Declaration public string Mask { get; set; } Property Value Type Description System.String Title This property contains the name of the sequence. Declaration [Required] public string Title { get; set; } Property Value Type Description System.String UpdatedBy This property contains the name of the person who last updated the sequence. Declaration public string UpdatedBy { get; set; } Property Value Type Description System.String UpdatedDate This property contains the date when the sequence was last updated. Declaration public DateTime? UpdatedDate { get; set; } Property Value Type Description System.Nullable < System.DateTime > Implements System.ComponentModel.DataAnnotations.IValidatableObject CG.Business.Models.IModel<TKey> CG.Business.Models.IModel"
  },
  "api/CG.Sequences.Repositories.html": {
    "href": "api/CG.Sequences.Repositories.html",
    "title": "Namespace CG.Sequences.Repositories",
    "keywords": "Namespace CG.Sequences.Repositories Classes SequenceRepositoryBase<TOptions, TModel, TKey> This class is a default implementation of the ISequenceRepository<TModel, TKey> interface. Interfaces ISequenceRepository<TModel, TKey> This interface represents an object for reading and writing numeric sequences."
  },
  "api/CG.Sequences.Repositories.ISequenceRepository-2.html": {
    "href": "api/CG.Sequences.Repositories.ISequenceRepository-2.html",
    "title": "Interface ISequenceRepository<TModel, TKey>",
    "keywords": "Interface ISequenceRepository<TModel, TKey> This interface represents an object for reading and writing numeric sequences. Inherited Members CG.Business.Repositories.ICrudRepository<TModel, TKey>.AddAsync(TModel, System.Threading.CancellationToken) CG.Business.Repositories.ICrudRepository<TModel, TKey>.UpdateAsync(TModel, System.Threading.CancellationToken) CG.Business.Repositories.ICrudRepository<TModel, TKey>.DeleteAsync(TModel, System.Threading.CancellationToken) CG.Business.Repositories.ILinqRepository<TModel>.AsQueryable() System.IDisposable.Dispose() Namespace : CG.Sequences.Repositories Assembly : CG.Sequences.dll Syntax public interface ISequenceRepository<TModel, TKey> : ICrudRepository<TModel, TKey>, ILinqRepository<TModel>, IRepository, IDisposable where TModel : class, IModel<TKey> where TKey : new() Type Parameters Name Description TModel The model type associated with the repository. TKey The key type associated with the model."
  },
  "api/CG.Sequences.Repositories.SequenceRepositoryBase-3.html": {
    "href": "api/CG.Sequences.Repositories.SequenceRepositoryBase-3.html",
    "title": "Class SequenceRepositoryBase<TOptions, TModel, TKey>",
    "keywords": "Class SequenceRepositoryBase<TOptions, TModel, TKey> This class is a default implementation of the ISequenceRepository<TModel, TKey> interface. Inheritance System.Object CG.DisposableBase CG.Business.Repositories.RepositoryBase CG.Business.Repositories.RepositoryBase <TOptions> CG.Business.Repositories.LinqRepositoryBase <TOptions, TModel> CG.Business.Repositories.LinqRepositoryBase <TOptions, TModel, TKey> CG.Business.Repositories.CrudRepositoryBase <TOptions, TModel, TKey> SequenceRepositoryBase<TOptions, TModel, TKey> Implements ISequenceRepository <TModel, TKey> CG.Business.Repositories.ICrudRepository <TModel, TKey> CG.Business.Repositories.ILinqRepository <TModel> CG.Business.Repositories.IRepository System.IDisposable Inherited Members CG.Business.Repositories.CrudRepositoryBase<TOptions, TModel, TKey>.AddAsync(TModel, System.Threading.CancellationToken) CG.Business.Repositories.CrudRepositoryBase<TOptions, TModel, TKey>.UpdateAsync(TModel, System.Threading.CancellationToken) CG.Business.Repositories.CrudRepositoryBase<TOptions, TModel, TKey>.DeleteAsync(TModel, System.Threading.CancellationToken) CG.Business.Repositories.LinqRepositoryBase<TOptions, TModel>.AsQueryable() CG.Business.Repositories.RepositoryBase<TOptions>.Options CG.DisposableBase.System.IDisposable.Dispose() CG.DisposableBase.Dispose(System.Boolean) CG.DisposableBase.IsDisposed System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Sequences.Repositories Assembly : CG.Sequences.dll Syntax public abstract class SequenceRepositoryBase<TOptions, TModel, TKey> : CrudRepositoryBase<TOptions, TModel, TKey>, ISequenceRepository<TModel, TKey>, ICrudRepository<TModel, TKey>, ILinqRepository<TModel>, IRepository, IDisposable where TOptions : IOptions<RepositoryOptions> where TModel : class, IModel<TKey> where TKey : new() Type Parameters Name Description TOptions TModel The model type associated with the repository. TKey The key type associated with the model. Constructors SequenceRepositoryBase(TOptions) This constructor creates a new instance of the SequenceRepositoryBase<TOptions, TModel, TKey> class. Declaration protected SequenceRepositoryBase(TOptions options) Parameters Type Name Description TOptions options The options to use with the repository. Methods NextAsync(Sequence, Int32, CancellationToken) Declaration public abstract Task<string[]> NextAsync(Sequence sequence, int count, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description Sequence sequence System.Int32 count System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task < System.String []> Implements ISequenceRepository<TModel, TKey> CG.Business.Repositories.ICrudRepository<TModel, TKey> CG.Business.Repositories.ILinqRepository<TModel> CG.Business.Repositories.IRepository System.IDisposable"
  },
  "api/CG.Sequences.SequenceException.html": {
    "href": "api/CG.Sequences.SequenceException.html",
    "title": "Class SequenceException",
    "keywords": "Class SequenceException This class represents a sequence related exception. Inheritance System.Object System.Exception CG.Business.BusinessException SequenceException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : CG.Sequences Assembly : CG.Sequences.dll Syntax [Serializable] public class SequenceException : BusinessException, ISerializable Constructors SequenceException() This constructor creates a new instance of the SequenceException class. Declaration public SequenceException() SequenceException(SerializationInfo, StreamingContext) This constructor creates a new instance of the SequenceException class. Declaration public SequenceException(SerializationInfo info, StreamingContext context) Parameters Type Name Description System.Runtime.Serialization.SerializationInfo info The serialization info to use for the exception. System.Runtime.Serialization.StreamingContext context The streaming context to use for the exception. SequenceException(String) This constructor creates a new instance of the SequenceException class. Declaration public SequenceException(string message) Parameters Type Name Description System.String message The message to use for the exception. SequenceException(String, Exception) This constructor creates a new instance of the SequenceException class. Declaration public SequenceException(string message, Exception innerException) Parameters Type Name Description System.String message The message to use for the exception. System.Exception innerException An optional inner exception reference. Implements System.Runtime.Serialization.ISerializable"
  },
  "api/CG.Sequences.Stores.html": {
    "href": "api/CG.Sequences.Stores.html",
    "title": "Namespace CG.Sequences.Stores",
    "keywords": "Namespace CG.Sequences.Stores Classes SequenceStore This interface represents an object that manages the operation of numeric sequences. Interfaces ISequenceStore<TModel, TKey> This interface represents an object that manages the generation of numeric sequences."
  },
  "api/CG.Sequences.Stores.ISequenceStore-2.html": {
    "href": "api/CG.Sequences.Stores.ISequenceStore-2.html",
    "title": "Interface ISequenceStore<TModel, TKey>",
    "keywords": "Interface ISequenceStore<TModel, TKey> This interface represents an object that manages the generation of numeric sequences. Inherited Members CG.Business.Stores.ICrudStore<TModel, TKey>.AsQueryable() CG.Business.Stores.ICrudStore<TModel, TKey>.AddAsync(TModel, System.Threading.CancellationToken) CG.Business.Stores.ICrudStore<TModel, TKey>.UpdateAsync(TModel, System.Threading.CancellationToken) CG.Business.Stores.ICrudStore<TModel, TKey>.DeleteAsync(TModel, System.Threading.CancellationToken) System.IDisposable.Dispose() Namespace : CG.Sequences.Stores Assembly : CG.Sequences.dll Syntax public interface ISequenceStore<TModel, TKey> : ICrudStore<TModel, TKey>, IStore, IDisposable where TModel : class, IModel<TKey> where TKey : new() Type Parameters Name Description TModel The type of associated model. TKey The type of key associated with the model.d Methods NextAsync(Sequence, Int32, CancellationToken) This method generates an array of counts for the specified Sequence object. Declaration Task<string[]> NextAsync(Sequence sequence, int count, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description Sequence sequence The sequence to use for the operation. System.Int32 count The number of counts to generate. System.Threading.CancellationToken cancellationToken A cancellation token. Returns Type Description System.Threading.Tasks.Task < System.String []> A task that returns an array of formatted counts. ResetAsync(Sequence, CancellationToken) This method resets the value of the specified Sequence object. Declaration Task<Sequence> ResetAsync(Sequence sequence, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description Sequence sequence System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task < Sequence > A task that returns the newly updated Sequence object."
  },
  "api/CG.Sequences.Stores.SequenceStore.html": {
    "href": "api/CG.Sequences.Stores.SequenceStore.html",
    "title": "Class SequenceStore",
    "keywords": "Class SequenceStore This interface represents an object that manages the operation of numeric sequences. Inheritance System.Object CG.DisposableBase CG.Business.Stores.StoreBase CG.Business.Stores.CrudStoreBase < Sequence , System.Int32 , ISequenceRepository < Sequence , System.Int32 >> SequenceStore Implements CG.Business.Stores.ICrudStore < Sequence , System.Int32 > CG.Business.Stores.IStore System.IDisposable Inherited Members CG.Business.Stores.CrudStoreBase<CG.Sequences.Models.Sequence, System.Int32, CG.Sequences.Repositories.ISequenceRepository<CG.Sequences.Models.Sequence, System.Int32>>.AsQueryable() CG.Business.Stores.CrudStoreBase<CG.Sequences.Models.Sequence, System.Int32, CG.Sequences.Repositories.ISequenceRepository<CG.Sequences.Models.Sequence, System.Int32>>.AddAsync(CG.Sequences.Models.Sequence, System.Threading.CancellationToken) CG.Business.Stores.CrudStoreBase<CG.Sequences.Models.Sequence, System.Int32, CG.Sequences.Repositories.ISequenceRepository<CG.Sequences.Models.Sequence, System.Int32>>.UpdateAsync(CG.Sequences.Models.Sequence, System.Threading.CancellationToken) CG.Business.Stores.CrudStoreBase<CG.Sequences.Models.Sequence, System.Int32, CG.Sequences.Repositories.ISequenceRepository<CG.Sequences.Models.Sequence, System.Int32>>.DeleteAsync(CG.Sequences.Models.Sequence, System.Threading.CancellationToken) CG.Business.Stores.CrudStoreBase<CG.Sequences.Models.Sequence, System.Int32, CG.Sequences.Repositories.ISequenceRepository<CG.Sequences.Models.Sequence, System.Int32>>.Dispose(System.Boolean) CG.Business.Stores.CrudStoreBase<CG.Sequences.Models.Sequence, System.Int32, CG.Sequences.Repositories.ISequenceRepository<CG.Sequences.Models.Sequence, System.Int32>>.Repository CG.DisposableBase.System.IDisposable.Dispose() CG.DisposableBase.Dispose(System.Boolean) CG.DisposableBase.IsDisposed System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Sequences.Stores Assembly : CG.Sequences.dll Syntax public class SequenceStore : CrudStoreBase<Sequence, int, ISequenceRepository<Sequence, int>>, ICrudStore<Sequence, int>, IStore, IDisposable Constructors SequenceStore(ISequenceRepository<Sequence, Int32>) This constructor creates a new instance of the SequenceStore class. Declaration public SequenceStore(ISequenceRepository<Sequence, int> repository) Parameters Type Name Description ISequenceRepository < Sequence , System.Int32 > repository The repository to use with the store. Methods AddAsync(Sequence, CancellationToken) Declaration public override Task<Sequence> AddAsync(Sequence sequence, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description Sequence sequence System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task < Sequence > Overrides CG.Business.Stores.CrudStoreBase<CG.Sequences.Models.Sequence, System.Int32, CG.Sequences.Repositories.ISequenceRepository<CG.Sequences.Models.Sequence, System.Int32>>.AddAsync(CG.Sequences.Models.Sequence, System.Threading.CancellationToken) NextAsync(Sequence, Int32, CancellationToken) Declaration public virtual Task<string[]> NextAsync(Sequence sequence, int count, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description Sequence sequence System.Int32 count System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task < System.String []> ResetAsync(Sequence, CancellationToken) Declaration public virtual Task<Sequence> ResetAsync(Sequence sequence, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description Sequence sequence System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task < Sequence > UpdateAsync(Sequence, CancellationToken) Declaration public override Task<Sequence> UpdateAsync(Sequence sequence, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description Sequence sequence System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task < Sequence > Overrides CG.Business.Stores.CrudStoreBase<CG.Sequences.Models.Sequence, System.Int32, CG.Sequences.Repositories.ISequenceRepository<CG.Sequences.Models.Sequence, System.Int32>>.UpdateAsync(CG.Sequences.Models.Sequence, System.Threading.CancellationToken) Implements CG.Business.Stores.ICrudStore<TModel, TKey> CG.Business.Stores.IStore System.IDisposable"
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Add your introductions here!",
    "keywords": "Add your introductions here!"
  },
  "index.html": {
    "href": "index.html",
    "title": "Introduction",
    "keywords": "Introduction CG.Sequences.dll contains abstractions for numeric sequences."
  }
}